Domain-Analysis CLI Tools:

Get-AD<TAB>
Get-ADDomain | FL NetBIOSName
Get-ADTrust | -Filter *
Get-ADDomainControler -Filter | {Domain -eq "army.warriors"} | Select Name
Get-ADRootDSE
Get-ADUser -Identity "Administrator" -Properties *
Get-ADObject -Filter ((ObjectClass -eq "user") -and (ObjectCategory -eq "person")) | Measure-Object | FL count


more on Get-AD*  :   http://ss64.com/ps/ad.html



dsadd
dsquery * DC=army,DC=warrriors -Filter "(&(ObjectClass=user)(ObjectCategory=person))" -attr sAMAccountName
Get-ADObject -Filter {(objectClass -eq "user") -and (objectcategory -eq "person")}
.. finds object in the domain

dsquery * DC=army,DC=warrriors -limit 0 -filter <filter> -attr <atribList>
Get-ADObject -SearchBase "CN=users,DC=army,DC=warrriors" -Filter * _resultSetSize 12000
.. search for large number of objects in domain

adfind -b "CN=group,CN=users,DC=army,DC=warrriors" -asq member -f objectClass=user
Get-ADGroup "Domain Admins" | Get-ADGroupMember | Get-ADUser -Properties sAMAccountname | Select samaccountname    
Get-ADUser -Properties sAMAccountName | Select samaccountname
.. search domain w/ attribute scoped query

dsquery * -s <target ip> -u <username> -p ReallyStrongPassword!! DC=army,DC=warrriors -scope subtree -attr "name" -filter (&(objectclass=group)(objectCategory=group) (groupType:1.2.840.113556.1.4.804:=8))"
.. finds universal groups in the 'army.warriors' domain by using bitwise AND filter (804).

dsquery * -s <target ip> -u <username> -p ReallyStrongPassword!! DC=army,DC=warrriors -attr "name" -filter (&(objectclass=user)(objectCategory=person) useraccountcontrol:1.2.840.113556.1.4.803:=2))"
.. finds disabled user-accounts in the 'army.warriors' domain by using bitwise AND filter (803).




UAC Codes can be added when querying for more than one UAC attribute, ie:

Account Disabled  +  Normal user account
= 2 + 512
= 514 UAC code










adfind -default -bit -f groupType:AND:=8            (finds same as above using 'adfind')
adfind -default -bit -f useraccountcontrol:AND:=2   (finds same as above using 'adfind')

admod -b "CN=Joe Blow,OU=ORG,DC=army,DC=warrriors" description::"Brigade Commander"
Set-ADObject -Identity "CN=Joe Blow,OU=ORG,DC=army,DC=warrriors" -Replace @{Description="Brigade CDR"}
.. modifies an object's atributes

dsmove "CN=Bad Guy,OU=ORG,DC=army,DC=warrriors" -newparent "OU=JAIL,DC=army,DC=warrriors"
admod -b "CN=Bad Guy,OU=ORG,DC=army,DC=warrriors" -move "OU=JAIL,DC=army,DC=warrriors"
Move-ADObject -Identity "CN=Bad Guy,OU=ORG,DC=army,DC=warrriors" -TargetPath "OU=JAIL,DC=army,DC=warrriors"
.. moves object (user, computer) to different OU / container

dsquery * "CN=Jimbo,OU=ORG,DC=army,DC=warrriors" -attr name createTimestamp modifyTimestamp
adfind -default -rb CN=Users -f "cn=Jimbo" createTimestamp modifyTimestamp
.. viewing MAC times of an object (user, computer)

dsquery ou
adfind -default -f "objectcategory=organizationalUnit" -dn
adfind -default -sc oudmp     messy
Get-ADOrganizationalUnit -Filter * | Select DistinguishedName
.. enumerating the OUs in the domain

dsquery * "OU=ORG,CN=users,DC=army,DC=warrriors" -limit 0 -scope onelevel
adfind -b "OU=ORG,CN=users,DC=army,DC=warrriors" -s one -dn
Get-ADObject -SearchBase "CN=users,DC=army,DC=warrriors " -Filter *
.. enumerating the objects (user, computer)in an OU

dsquery * "OU=ORG,CN=users,DC=army,DC=warrriors" -scope base -attr msDS-Approx-Immed-Subordinates
adfind -b "OU=ORG,CN=users,DC=army,DC=warrriors" -s base msDS-Approx-Immed-Subordinates
Get-ADObject -SearchBase "OU=ORG,CN=users,DC=army,DC=warrriors" -Filter * | Measure-Object | FL Count
.. Determining Approximately How Many Child Objects an OU Has

User Account Attributes:
homeDirectory 	Local or UNC path of user’s home directory. 

homeDrive 	Defines the drive letter to map the user’s home directory to. 

lastLogon 	The last time that a user logged on to a particular DC. This information is not replicated among domain controllers in a forest.

lastLogonTimestamp 	Approximate last logon timestamp, which is replicated among domain controllers.  

managedObjects 	Multivalued, linked attribute (with managedBy) that contains a list of DNs of objects the user manages.

lockoutTime 	Large integer representation of the timestamp for when a user was locked out. 

memberOf 			Backlink listing of DNs of the groups the user is a member of. 

objectSid 			Octet string representing the SID of the user.

primaryGroupID 			ID of the primary group for the user. 

profilePath 	UNC path to profile directory. pwdLastSet Large integer denoting the last time the user’s password was set. 

sAMAccountName 	NetBIOS-style name of the user; limited to 20 characters to support legacy applications.

sIDHistory 			Multivalued attribute that contains a list of SIDs that are associated w						ith the user.

scriptPath 			Path and filename of logon script.
 
sn 					Last name of user.

tokenGroups 	List of SIDs for the groups in the domain the user is a member of (both directly and via nesting).

unicodePwd 	Octet string that contains a hash of a user’s password. This attribute cannot be directly queried.

userAccountControl 	Account flags that define such things as account status and password change status.

userPrincipalName 	Internet-style account name for a user, which the user can use to log on to a computer; in most cases this should map to the user’s email address, but this does not always need to be the case.

userWorkstations 		List of computers a user can log on to, stored as a Unicode string.

msDS-PSOApplied 	A backlink that lists the Password Settings Objects that are applied to a user object.

msDS-ResultantPSO 	A constructed attribute that indicates which PSO is in effect for a user object.

msDS-UserPasswordExpiryTimeCompu
ted		A constructed attribute that indicates when a user’s password is going to expire.

msDS-FailedInteractiveLogonCount
Indicates the number of failed interactive logons for a user account since the Interactive Logon Count feature was enabled.

msDS-FailedInteractiveLogonCountAtLastSuccessfulLogon
Indicates the number of failed interactive logons for a user account since the last time the user successfully logged on interactively.

msDSLastFailedInteractiveLogonTime
Indicates the last time and date that the user performed an unsuccessful interactive logon.

msDSLastSuccessfulInteractiveLogonTime
Indicates the last time and date that the user performed a successful interactive logon.

msDS-AuthenticatedAtDC 	A multivalued attribute listing the RODCs through which a user has successfully authenticated to a full DC.

msDS-RevealedDSAs 		Backlink indicating which RODCs have cached a user’s password secrets.

msDS-ManagedPassword 		Contains password information for group-managed service accounts.
.. user account attributes






dsmove "CN=Susan,OU=OLD,DC=army,DC=warrriors"  -newparent "CN=Susan,OU=NEW,DC=army,DC=warrriors"  
admod -b "CN=Susan,OU=OLD,DC=army,DC=warrriors" -move "CN=Susan,OU=NEW,DC=army,DC=warrriors"  
Move-ADObject -Identity "CN=Susan,OU=OLD,DC=army,DC=warrriors" -TargetPath "CN=Susan,OU=NEW,DC=army,DC=warrriors"  
.. moving a user

Get-ADObject " DC=army,DC=warrriors " -Properties * | FL minPwdLength,pwdHistoryLength,pwdProperties,lockoutThreshold
.. Viewing the Domain-Wide Account Lockout and Password Policies

dsmod user "CN=Susan,OU=NEW,DC=army,DC=warrriors" -pwd Passw0rD
admod -b "CN=Susan,OU=NEW,DC=army,DC=warrriors" #setpwd#::Passw0rD
 Set-ADAccountPassword -Identity "CN=Sue,OU=NEW,DC=army,DC=warrriors" -NewPassword Passw0rD  -Reset
.. Seeting a User's password

adfind -b "CN=Sue,OU=NEW,DC=army,DC=warrriors" lastLogonTimestamp -tdc
.. Determining a User’s Last Logon Time

dsquery user -inactive <NumWeeks>
.. Finding Users Who Have Not Logged On Recently

Get-ADPermission -Identity <Group Name>
adfind -gcb -f name=<Group Name> ntsecuritydescriptor -sddl++ -resolvesids
.. Viewing the Permissions of a Group

Get-ADGroupMember -Identity "Domain Admins" -recursive | Select Name
memberof -group "OU=group,DC=army,DC=warrriors"
dsget group "OU=group,DC=army,DC=warrriors" -members -expand
.. Viewing the Nested Members of a Group

dsquery user -stalepwd <NumDaysSinceLastPwdChange>
.. Finding Users Whose Passwords Are About to Expire

Add-ADPermission -Identity <Group Name> -User <User or Group Name> -AccessRights WriteProperty -Properties "members"
Set-ADGroup <Group Name> -ManagedBy "OU=group,DC=army,DC=warrriors"
dsacls "cn=Joe Blow,ou=sales,dc=adatum,dc=com" /G salesadmins@adatum.com:WP;member;
.. Delegating Control for Managing Membership of a Group


Attributes of computer objects ..
cn 					Relative distinguished name of computer objects.

dnsHostName 	Fully qualified DNS name of the computer.

lastLogonTimestamp 	The approximate timestamp of the last time the computer logged in to the domain.

managedBy 	The distinguished name (DN) of the user or group that manages the computer.

memberOf 			List of DNs of the groups the computer is a member of.

msDSAuthenticatedToAccount
List
It is a backlink attribute that identifies users who have successfully authenticated to a full DC via a particular RODC.

msDSIsPrimaryComputerFor	It indirectly identifies the primary user of a computer.

msDS-RevealedUsers 	This attribute was introduced in Windows Server 2008. It identifies the list of users and computers whose secrets have been replicated to an RODC.

operatingSystem 			Text description of the operating system running on the computer. 

operatingSystemHotFix 		Currently not being used, but will hopefully be populated at some point.

operatingSystemServicePack	Service pack version installed on the computer. 

operatingSystemVersion 		Numeric version of the operating system installed on the computer. 

pwdLastSet 	Large integer that can be translated into the last time the computer’s password was set. 

sAMAccountName 	NetBIOS-style name of the computer. This is typically the name of the computer with a $ at the end.

userAccountControl 	Account flag that defines various account properties. In the case of a computer object, this specifies whether the computer is a member computer or a domain controller.

.. Attributes of computer objects

New-ADComputer -Name "<ComputerName>" -SamAccountName "<SamAccountName>" -Path "OU=group,DC=army,DC=warrriors"
admod -b "<ComputerDN>" objectclass::computer sAMAccountName::<ComputerName>$ userAccountControl::4096
description::"<Description>" -add
dsadd computer "<ComputerDN>" -desc "<Description>"
.. Creating a Computer

Move-ADObject -Identity "<ComputerDN>" -TargetPath "<NewParentDN>"
admod -b "<ComputerDN>" -move "<NewParentDN>"
dsmove "<ComputerDN>" -newparent "<NewParentDN>"
.. Moving a Computer Within the Same Domain

Get-ADComputer -Filter {OperatingSystem -eq "Windows Server 2012 Datacenter"} | Select Name
Get-ADComputer -Filter {OperatingSystem -eq "Windows Server 2008 R2 Enterprise" -and OperatingSystemVersion -eq "6.1 (7601)"} | Select Name
adfind -b <DomainDN> -f "(&(objectcategory=computer)(operatingSystem=Windows Server 2012 Datacenter))"
dsquery * <DomainDN> -scope subtree -attr "*" -filter "(&(objectcategory=computer)(operatingSystem=Windows Server 2012 Datacenter))"
.. Finding Computers with a Particular OS

Get-ADComputer -Filter * | Select Name
adfind -default -f objectCategory=computer
.. Listing All the Computer Accounts in a Domain



net user 
.. access shares remotelyxfreerdp /u:andy.dwyer /v:10.50.26.193 /dynamic-resolution +glyph-cache +clipboard ###Password is BurtMacklinFBI
CTFd Account SESA-M-005 PW: SESA005
ssh -J andy.dwyer@10.50.26.193 
4 Linux 6 Windows Questions



DAY 1 ###POWERSHELL,PROFILES< AND REMOTING###
Get-Verb ### gets all verbs 
Get-Command -type cmdlet |  | sort-object -property noun | format -groupby noun ### shows all commands formatted by noun
Get-Help get-process ### shows all available help for that command 
set-alias -name IP -Value get-netipaddress ### grabs local host IPs and network information
Methods are things you can take action on, Properties are something you can take information from
get-process | select-object name,id,path | ft ### grabs information from services and formats by name, ID and path
get-process | select-object name,id,path | where-object {$_.id -lt '1000'} ### grabs objects with id less then 1000
Get-CimInstance -classname win32_logicaldisk





get-ciminstance -classname win32_logicaldisk -filter "drivetype=3" | Get-Member
Get-WmiObject -class win32_logicaldisk -filter "drivetype=3"
Get-CimInstance -class Win32_BIOS ### Shows BIOS information
###DO (WHILE OR UNTIL) 
###FOR(ITERATES THROUGH A LIST UNTIL NOT TRUE)
###FOREACH(GOES THROUGH MULTIPLE ARRAYS ?
###IF ELSE(IF CONDITION DO THIS ELSE THIS)
###
Get-ExecutionPolicy -list ###shows security for the machine 
Set-ExecutionPolicy ###how to set the execution policy 
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser ### changes ExecutionPolicy to unrestricted on currentuser
Get-PSSessionConfiguration 
###Powershell remoting is enabled by default
Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles\'###
winrm get winrm/config ### gets information for winrm
Get-Item WSMan:\localhost\Client\TrustedHosts
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "file-server,domain-controll"
invoke-command -ComputerName file-server {Get-Service}
invoke-command -ComputerName file-server,domain-controll {Get-Service} -asjob
Receive-Job 2
$Session = NewPSSession -Computername File-Server
Enter-PSSession -Session $Session
Invoke-Command -Session $Session {Get-Service}
test-path -Path $profile.CurrentUserCurrentHost
test-path -Path $profile.CurrentUserAllHost
test-path -Path $profile.AllUserCurrentHost
test-path -Path $profile.AllUserAllHost
$profile | Get-Member -type NoteProperty
New-Item -itemtype file -path $profile -force ###profile it reads from in powershell start up



ls 'C:\Users\CTF\Desktop\ctf'

cd C:\Users\CTF\Videos\
(dir).count
or
Get-Childitem -File C:\Users\CTF\Videos\ | Measure-Object

cd C:\Users\CTF\Downloads
ls
or

Compare-Object (gc .\new.txt) (gc \old.txt)

(get-content .\words.txt | Sort-Object -Descending) | select -First 21

Get-Content .\words.txt | sort | unique | Measure-Object

gci | measure


usacys
UnitedStatesArmyCyberSchool

DAY 2 ### REGISTRY ###
regedit.exe , Located at C:\Windows\regedit.exe

get-item

SETHC.exe is a sticky key registry, you can establish persistance on it

New-PSDeive -Name HKU -PSProvider Registry -Root HKEY_USERS

Forensically Relevant keys 
-Internet URL history
-USB History
-Wireless accept point history
research anytime during baseline registry (Cont. on slides)

HKLM\BCD00000000
HKLM\SAM\SAM\

Baselining is comparing the customers Registry with a normal registry

HKLM has configurations for entire computer

HKCU resides in memory, will wipe after reset 

connecting by remote registry id det to deufakt si yiu can't do that

reg query hklm\software\microsoft\windows\currentversion\run

reg add hklm\software\microsoft\windows\currentversion\run /v testkey /t REG_SZ /d C:\Windows\system32\WindowsPowershell\v1.0\powershell.exe

reg delete hklm\software\microsoft\windows\currentversion\run /v testkey

 get-childitem get-itemproperty get-item ### to query registries

set-itemproperty remove-itemproperty ### to append items in key and delete item in key

new-item new-itemproperty ### 

 get-childitem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\ ### Shows sub-keys but not values

get-item HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\ Shows values but not sub-keys 

Day 3 ### LINUX ###

which ### shows path of commands 
hostname ### shows name of the host on computer, shows which BOX you're on
whoami ### who is logged in right now 
who ### shows who is all logged in on the machine 
ifconfig or ip config ###displays network interfaces and configured IP addresses 
arp or ip neigh ### see MAC Addresses on machines 
ip route or route ### Shows where packets are being routed to 
ss or netstat ### will show network connections or listening ports 
     -netstat -anop ### shows all network connections and executables with them
iptable ### shows firewall rules (you need admin permissions)
sudo !! ### runs previous commands with admin permissions
sudo -l ### shows what command a user can run with elevated permissions 
whereis ### locates binary, source and manual page files for the command that follows


Arguments ### Modify the functionallity of the base command to get desired results 
ls (--help) ### is an argument for a command to help the user understand command 

Variables and Command Substitution
echo $a ### trying to echo the variable a
directories=$(ls -lisa) ### the directories variable does an ls with -lisa options

Redirection
StandardInput = 0
StandardOutput = 1 
StandardError = 2 
Redirection is done with >(filename or numbered stream)
EX: ls coffee 2> error.txt

Piping 
standard output to standard input 

Automation 
For loops  
goes through items in a list until doesn't meet condition
If
Runs Statement until no longer true then goes to an else block
While
Execute statement until it is false 
will run infinitely

Linux Filesystems
/root 
/bin ### essential User commands
/sbin ### used for system maintance
/home ###
/etc ### SystemCofigs
/var ### Variable data
/boot ### everything pertaining to the proccess execpt config files 
/dev ### device files 
/lib ### kernel modules and shared libaries
/mnt ### generic points for mount devices 
/proc ### processes
obt/ ### softwate and packages from 
file ### shows you what type of file it is 

Linux Users
id ### shows uid,gid,groups
cat /etc/passwd | grep student ### gets the same as id
cat /etc/group | grep student ### shows the sudo group, gid values, members 
ls -lisa /bin/dd ### shows privileges for files with read, write, execute 
sticky bit ### removes the ability to delete files unless the user attempting is th owner of the file 
Special Permissions SUID and GUID allows only for the owning user or group to access the executable 

Day 4 

BIOS and UEFI Proccess is the same just different variations 
BIOS
-uses bootmgr
-OS Loader uses winload.exe or winresume.exe
UEFI
-uses bootmgrfw.efi
-OS Loader winload.efi or winresume.efi
Windows Pre-Boot and Boot Process 
POST -> BIOS or UEFI -> MBR or GUID Partition Table -> go to FG Study Guide for more info
System has the PID of 4
Windows 10 logon process -> FG Study Guide for more info
BCDEDIT allows for user to edit BOOT Configuration
Firmware is the middleground between Boot process and system, is non-voliatile 
HAL is a layer between kernel and Hardware 
bcdedit /export C:\Lion_BCD grabs backup of bcdedit and puts it into C Drive 
bcdedit /set {current} 
bcdedit /create {ntldr} /d "Windows" 
bcdedit /display
bcdedit /deletevalue 
bcdedit /import
bcdedit /delete

Going to bad previous config
Windows Initalizing services 
System reverting to bad conf

Day 5 Linux Startup

Big Mike Got Killed In Russia (SYSV)
BIOS
MBR -located-> GRUB
KERNEL -> INIT with PID #1
Run Level 

BIOS
- First thing to turn on 
- preforms integrity checks 
- starts MBR
MBR (Master Boot Record)
- starts GRUB
- First 512 bytes of Harddrive 
- Has a Max of 4 primary partitions and a max size of 2TB
- located in /dev/hda or /dev/sda 
Commands du, df, lsblk
GRUB (Grand Unified Bootloader) 
Possible Area for an Attacker to put persistance 
- Config.file FGStudentGuide
Kernel
Layer between Hardware and OS
- executes /sbin/init or systemd daemon
- ls -l /sbin/init
Init
Configures the environment for the system
- looks at the /etc/inittab
- Available run levels 0 - 6
- entire process is handled by scripts in /etc/init.d/ or systemctl get-default list-dependencies 
Levels for Init.d
0 off
1 single user commandline
2 multi user witout networking 
3 full multiuser with networking 
4 
5 Graphical Target
6 
-Systemd Load system in parallel and from binaries (faster and more secure then init)
### If something is running something other than initd probably malicious or worth investigating 
Logs are stored in the /var directory 

Commands 
/etc/environment holds global variables ( have to reset when updated and can be used by all users ) 
/etc/profile logs when user uses an interactive shell in linux ( able to put persistance )
.bashprofile (does something) are in home directory

sudo dmidecode -t bios (looks if machine is either BIOS or UEFI)
lsblk (looks through storage devices)
sudo xxd -l 512 -g 1 /dev/vda (looks at the MBR) ### start of the drive EB 63

you can tell if it is systemV or SysD with cat /etc/inittab

xxd for hash dumps
dd gives a bit for bit copy ##creates copy of backup drive

ls -l show symbolic links in files/directories 

Day 5 
process validity is to VAILIDATE if a process is what it says it is 
serivces are exacutables that run in the backround of windows ( no user interaction ) 
- get-process SMSS,CSRSS,LSASS | sort -property id
- Get-Process | select Name, Id, Description | Sort -Property Id 
system processes and services run in C:\Windows\System32 by default 
- Get-Process | select name, priortiyclass
- Get-Process chrome | foreach {$a} {$_.modules} | more
- Get-Process "*chrome*" | select-object -ExpandProperty modules | more
- Get-Process "*chrome*" | select-object -ExpandProperty modules | Where-Object modulename -like '*chrome*' | more ( grabs all .dll with the name chrome )
- Get-CimInstance Win32_process
- Get-CimInstance Win32_Process | select name, processid, Parentprocessid gets name 
- Get-CimInstance Win32_Service | select name, processid, Pathname | ft -wrap | more
- Get-service XblGameSave | format-list *
- Get-service | where-object { $_.status -eq "Running" }
- Get-ScheduledTask | select * | select -First 1
Command Prompt
tasklist (Shows process) -v (shows more information about process)
tasklist -m (shows process and .dlls )
tasklist -m -fi 
tasklist /fo:list
tasklist /fo:csv

sc queryex type=service | more
sc queryex type=service state=inactive

Users account control 
Registry key for UAC is "HKLM\SOFTWARE\Microsoft\Windows|CurrentVersion\Policies|system"
Colors for UAC 
Red - Application or pubblisher blocked by policy group 
Blue - 
Yelow - 
Different Permission levels for UAC ( requireAdministrator, asInvoker, highestAvailable ) ###Some windows applications can auto-elevate

SysInternals 
Procmon shows realtime process 
procex
TCPView 
psloggedon (shows users currently logged on)
logonsessions (?)
pslist (cmd tool for getting process information)
psinfo (cmd tool gathers key information about system) 
.\pslist.exe -s 15 -r 1

systoolsinternal for res of Win_Process_Situational_Awareness
Handles
C:\Users\student\Downloads\Tools\accesschk.exe -p spoolsv.exe

Day 6
kthreadd always PID #2
/sbin/init always PID #1
The Kernel process runs in its own memory space making it more secure 
system calls ### process make calls to the kernel 

Orphans and Zombies (Go to FG)
- Orphans are parentless processes, adopted by sbin/init with a PPID(Parent PID) of 1
- Zombies are processes that have completed task but still are on the process table, cannot be killed unless you terminate the Parent process is terminated
- Daemons are programs that run in the background as processes
- All daemons are Orphans ,but not all orphans are Daemons
- Daemons purpose is to manage/monitor a service: {status, start, restart}

Job control 
- jobs display List of jobs running in the background
- a system cronjob it is running from /etc/crontab 
- if a user is running a cronjob it will run from /var/spool/cron/crontabs/
### cron jobs are scheduled task and is it a form of prediction
- crontab -u [user] file ### sets users crontab file to the contents of listed file
- crontab -l -u [user] ### displays users crontab contents 
- crontab -r -u [user] ### Removes users crontab contents
- crontab -e -u [user] edits users crontab contents

ls -l /etc/cron.d ### list all files in etc/cron.d 
cat /etc/crontab ### system crontab jobs 
ls -l /etc/cron.daily ### shows daily cronjobs
ls -l /var/spool/cron/crontab ### user cronjobs 

Three ways to stop processes
/etc/init.d/cron stop
service cron start
systemctl restart cron.service

./show-orphan.sh ### shows parentless processes aka orphans

Zombies
ps -elf | grep -v grep | grep sleep

see processes in linux ps -a, top and keypress f2, htop 

[] means kernel processes 

System UID Range(100-999)
UID userid
EUID user permissions
RUID real user ID, Who owns it

cronjobs forms a persistance 

sudo lsof 7.1FG
FD – Represents the file descriptor. Some of the values of FDs are
cwd – Current Working Directory
txt – Text file
mem – Memory mapped file
mmap – Memory mapped device
# – Represent the actual file descriptor
r for read, w for write, u for read and write.

etc/inittab is a form of persistance, config file is everything it takes to run a file 91:2345:respawn:/bin/netcat -lp 9999
 

to find the bash process use ps -elf to find the PID and run ps -ef to backtrack to the original Porcess PPID

Tolkien Main
Eowyn
Aragorn
BruceWayne

Day 7
3 types of audititng logs System,Security and Application
A windows Artifact is a piece of information about the user
Artifacts are
- UserAssist
- Windows Background Activity Moderator (BAM)
- Recycle Bin
- Prefetch
- JumpList
- Recent Files
- Browser Artifacts

Differnt ways to get SID
get-wmiobject win32_useraccount | select name,sid (will see all domain accounts and local accounts)
get-localuser | select Name,SID (PowerShell)
wmic UserAccount get name,sid (cmd only)
Useful for looking in the registry with sids 

UserAssist
- tracks GUI-based programs
- can see opened executable or shortcuts 
- doesn't track or save what happens in the program (Useful for starting timelines) 
- Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count"
- use ROT13 to decode messages 

Windows Background Activity Moderator (BAM)
get-computerinfo | select osname,osversion,OsHardwareAbstractionLayer | format list (try for others)
Grab UserSID then plug into the end of Get-ItemProperty
Get-Itemproperty 'HKLM:\SYSTEM\CurrentControlSet\Services\bam\State\UserSettings\S-1-5-21-1584283910-3275287195-1754958050-1004' shows what user ran with BAM

Recycle Bin
Get-Childitem 'C:\$recycle.bin' -recursive -verbose -Force | select FullName 
wmic useraccount where 'sid="S-1-5-21-1584283910-3275287195-1754958050-1005"' get name (shows name of the user if you have SID)
Get-Content 'C:\$Recycle.Bin\S-1-5-21-1584283910-3275287195-1754958050-1005\$R8QZ1U8.txt'

PreFetch
is created when the application is run for the first time
all prefetch files are stored in C:\Windows\prefetch
gci -path C:\WIndows\prefetch -erroraction continue | select name 
is useful for if process is misspelled to look into 

Jumplist
for items that have been frequently been used 
Get-Childitem C:\Users\*\appdata\roaming\microsoft\windows\recent -erroraction continue | select FullName, LastAccessTime 
-shows artifacts 
IF SYSINTERNALS ARE IN THE SYSTEM Z:strings.exe

Recent Files 
Get-Item 'Registry::\HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.*'
-shows what files/information was recently viewed 
[System.Text.Encoding]::Unicode.GetString((gp "REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt")."0")
shows info on txt/file with the property number specefied by the previous command change the .extension and property number at the end

Browser Artifact 
shows what websites the adversary has been on 
.\strings.exe 'C:\Users\andy.dwyer\appdata\Local\chrome\user data\default\history' -accepteula (SHOWS ALL HISTORY FOR ONE USER)
.\strings.exe 'C:Users\andy.dwyer\AppData\local\Google\chrome\User Data\Default\Top Sites' (SHOWS MOST VIEWED SIGHTS)
.\strings.exe 'C:Users\andy.dwyer\AppData\local\Google\chrome\User Data\login data' (SHOWS LOGIN DATA)

Windows Auditing 
Security, System and Application are the three auditing logs
Account mnagement has all the Account management events. 4-dgits 
get-enventlog -logname system -newest 5 | ft 
(get-winevent -listlog *).count
Get-WinEvent -filehashtable 
GUI for Event-logs 
-shows all logs
-Get-History

PowerShell Artifacts 
PowerShell_transcript.ADMIN-STATION.OGp3Fa
x7.20210316141734.tx 
-records part of all of powershell 
get-CimInstance win32_service 

re-add hklm\software\wow6432node\policies\microsoft\windows\powershell\scriptblocklogging\ /v EnableScriptBlockLogging /t REG_DWORD /d 1 /f (starts logging every single powershell into a windows event log)

gci -path "C:\Windows\System32\drivers\etc\hosts" $_.LastWriteTime -Recurse
Find the last accessed Time 

Get-EventLog -Logname System -Message *Flag* | ft -wrap

Day 9
Remote Logging 
pros
- easy to conduct analysis from networks
- you can see evidence from the machine in logs 
cons 
- Logs can be cryptic (tells you general information, logs can't specify whats happening)
- Logging cost memory 
- Logging too much would put you at risk of missing info, the same with logging too little
- Not actively analyzing logs 
- Time Normalization ( Logs don't match the timeframe )

Log Types
Authentication #1
 /var/log/auth.log - Authentication related events
 /var/run/utmp - Users currently logged in
 /var/log/wtmp - History file for utmp
 /var/log/btmp -failed login attempts 

Application #2
 apache - web Server (dir)
 apt - Package Manager (dir)

System #3
 /var/log/messages - Legacy Catch all
 /var/log/syslog - Ubuntu/Debian Catch all
 dmesg = Device Messenger (queires /proc/kmsg)
 Kernel Ring Buffer - Never fills (Kernel Ring Access means highest privilege for whoever is in there)
 First Logs generated by the system

Quick Logging
 Location : /var/log
 Config File : /etc/rsyslog.conf
 Service : /usr/sbin/rsyslogd

Logging Daemon
/usr/sbin/rsyslogd
- Kernel ring buffer
- audit records via audit subsystem (auditd)

Config file
/etc/rsyslog.conf
faciltiy.severity standard

- facility = what program, or part of system, log is from
 - severity = urgency

Facility Codes

0   kernel messages
1   user-level messages
2   mail system
3   system daemons
4   security/authorization messages
5   messages generated internally by syslogd
6   line printer subsystem
7   network news subsystem
8   UUCP subsystem
9   clock daemon
10  security/authorization messages
11  FTP daemon
12  NTP subsystem13|log audit

Severity Codes

0  emerg, panic:  Emergency: system is unusable
1  alert:         Action must be taken immediately
2  crit:          Critical conditions
3  err, error:    Error conditions
4  warn, warning: Warning conditions
5  notice:        Normal but significant condition
6  info:          Informational messages
7  Debug:         Debug-level messages

Best Practices 
- Meaningful Naming Schema
- Seperate logs logically and by precedence 
- Sync time accross network (Zulu Time)
- Control log access 

Logrotate
/etc/logrotate.conf
How large to let files get, How long to keep them.
.rfc are how a certain process should run in a scientific way

Useful logging commands 
tail -f (Continously show end of file) 
less /var/log/syslog (View log in page viewer)
logger - Send a user generated message to system Log
> /var/log/messages - Wipe Logs 
last -f /var/log{wtmp,btmp} - Needed to view data files 

DEMO/NOTES
sudo grep "what log specific word" /var/log/syslog (find specific logs)
sudo less -f /var/log/syslog
journalctl shows system logs  (man for more info)
journalctl -u ssh.service --since "# of days ago"

XML 
Elements are the beginning words and are single colored
tags are < /> symbols [start,stop]
@@ means tcp connection 
8 0n serverity levels means all of the above

for xpath question start at nmaprun 
xpath -e query <another nmap thing here?> nmaprun/host/address/@addr or //@addr
                                                      status/@state="up"
// Selects nodes in the document from the current node that match the selection no matter where they are 

cat output.xml | xpath -e "//@addr" -q | md5sum
-e querys and "" are parameters -q silences 
cat output.xml | xpath -e "//@addr | //@portid"  -q | md5sum
 -can filter on more than one key attribute or element

 
jq . 'conn.log'

jq '.["id.orig_h"]' conn.log | sort | uniq
 -grabs unique IPs 
jq '.["resp_ip_bytes"] > 40 ' conn.log | grep "true" | wc -l
 -is a statement that validates how many IPs sent more than 40 bytes out 

wc -l counts how many numbers are in the list

path/to/log/location is where the log is stored and/or any action taken on the event before storage (like sending it to a remote server)
if the facility has a .(Severity) thats is what specific logs of the facility will be sent to the directory 
EX: cron.=7 /var/log/crondbg.log (means that all facility cron [debug(7)] messages will be sent to /var/log/crondbg.log


 grep -E "disconnect|login" log.txt 

DAY #?


Volatile data resets when computer shuts off (driver loses power)
Order of Volitility (most to least) 
- registers, cache 
- routing table, arp cache, process table, kernel statistics, memory 
- temporary file system 
- disk 
- remote logging and monitioring data that is relevent to the system in question
- physical configuration,network topology
- archival media 

.\volatility.exe -f .\cridex.vmem imageinfo --profile=WinXPS2x86 -h
shows which user preference                  

.\volatility.exe -f .\cridex.vmem --profile=WinXPS2x86 pslist
shows process list 

.\volatility.exe -f .\cridex.vmem --profile=WinXPS2x86 pstree
shows tree process

.\volatility.exe -f .\cridex.vmem  --profile=WinXPS2x86 procdump -p 1640 -D .
Dumps onto directory to inspect further upon use (Get-FileHash SHA256 to get hashdump)

.\volatility.exe -f .\cridex.vmem --profile=WinXPS2x86 memdump -p 1640 -D .
Dumps memory onto directory (use .\strings to convert into a text file and inspect)

.\strings.exe -accepteula C:\Users\andy.dwyer\Desktop\Memory_Analysis\1640.dmp > C:\Users\andy.dwyer\Desktop\Memory_Analysis\1640.txt
use string to reformat

search in notepad with regex 
- go to search in top left, find and plug in regex (make sure regex is on and it is in current txt file)

connections that are active during the capture  
.\volatility.exe -f .\cridex.vmem --profile=WinXPS2x86 connections

connections that are active and recently terminated during the capture
.\volatility.exe -f .\cridex.vmem --profile=WinXPS2x86 connscan

cmdscan looks at COMMAND HISTORY
driverscan looks at drivers 

windows security in the windows button and turn off the virus protection

Active Directory Enumeration DAY #?

Enumerate Users 
- Admin accounts that aren't known to the newtwork owners
- Accounts that have been active outside of normal working hours
- Accounts that are nested in multiple Admin Groups 
- Service accounts logging into workstations 
- Accounts that have logged in directly to the Domain Controller that are not normally authorized to do so

Get-Command -Module activedirectory

Get-ADDefaultDomainPasswordPolicy

Get-ADFineGrainedPasswordPolicy -Filter {name -like "*"}

Get-ADForest

Get-ADGroup -Filter *

Get-ADGroup -Identity 'IA Analysts Team'

Get-ADGroupMember -Identity 'Administrators' -Recursive

get-aduser -filter {Enabled -eq "FALSE"} -properties name, enabled

Enable-ADAccount -Identity guest

Set-AdAccountPassword -Identity guest -NewPassword (ConvertTo-SecureString -AsPlaintext -String "PassWord12345!!" -Force)

Add-ADGroupMember -Identity "Administrators" -Members guest

Add-ADGroupMember -Identity "Administrators" -Members "Bad.Guy"

Get-AdGroupMember -identity "Domain Admins" -Recursive | %{Get-ADUser -identity $_.DistinguishedName} | select name, Enabled

Gives all policy set for the user and groups user us part of
gpresult /user Administrator /v

Get-ADUser -Filter 'Name -like "*"'
- list all users and their default properties?

Search-ADAccount

Get-ADUser -Filter * -Properties EmailAddress,DisplayName | select EmailAddress, DisplayName | select-string -notmatch ".mil"

to recursively go thorugh all files go to the drive path (C:) and do a Get-ChildItem -recurse to show all files ### -files for files, -directory for folders

14287.pdf
Domain-CLI-Cheat-Sheet.docx
S-6

Get-AdUser -Filter * -Properties TelephoneNumber | where-object {$_.TelephoneNumber -match "706-336-6754" }
- How to filter by telephone number ### you could possibly filter by other -properties if you know what they are 

Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl
sees reversible encryption on Active Directories 

4 Linux 6 Windows Questions
4 hours to finish 
The Questions are a main indicator 

Windows netstat -anop for Linux
Linux netstat -anob sees connections that are active -ltup (might have to switch bp options for Win and Linux)
looks for ports 
- Super high port numbers 
- repeating port numbers 
- sequential port numbers 
- Port Numbers that spell out anything 

linux process
ps -elf for running process
IF SYSTEMD you can use systemctl

Windows process 
get-Process for running process
htop or top aswell
Understand the Parent/Child Process 

start mechanism means what turns on the light could be a scheduled task or a cronjob (something that started the PROCESS)

Run keys in registry 
HKLM\
Scheduled Task will keep going 
Powershell profiles gets checked when startup/powershell ISE 
crontabs 

net use sysinternal tools

windows artifacts and how to use them 
- ROT13 decoder
- where the location is and what to look for 



 cheat:lsof 
# To list all IPv4 network files:
sudo lsof -i4

# To list all IPv6 network files:
sudo lsof -i6

# To list all open sockets:
lsof -i

# To list all listening ports:
lsof -Pnl +M -i4

# To find which program is using the port 80:
lsof -i TCP:80

# To list all connections to a specific host:
lsof -i@192.168.1.5

# To list all processes accessing a particular file/directory:
lsof <path>

# To list all files open for a particular user:
lsof -u <username>

# To list all files/network connections a command is using:
lsof -c <command>

# To list all files a process has open:
lsof -p <pid>

# To list all files open mounted at /mount/point:
# (Particularly useful for finding which process(es) are using a mounted USB stick or CD/DVD.)
lsof +f -- <mount-point>


‘ls -l /sbin/init’ to determine which Init system you are using
go to slide 21 of Linux Boot Process for more information



  



Domain-Analysis CLI Tools:

Get-AD<TAB>
Get-ADDomain | FL NetBIOSName
Get-ADTrust | -Filter *
Get-ADDomainControler -Filter | {Domain -eq "army.warriors"} | Select Name
Get-ADRootDSE
Get-ADUser -Identity "Administrator" -Properties *
Get-ADObject -Filter ((ObjectClass -eq "user") -and (ObjectCategory -eq "person")) | Measure-Object | FL count


more on Get-AD*  :   http://ss64.com/ps/ad.html



dsadd
dsquery * DC=army,DC=warrriors -Filter "(&(ObjectClass=user)(ObjectCategory=person))" -attr sAMAccountName
Get-ADObject -Filter {(objectClass -eq "user") -and (objectcategory -eq "person")}
.. finds object in the domain

dsquery * DC=army,DC=warrriors -limit 0 -filter <filter> -attr <atribList>
Get-ADObject -SearchBase "CN=users,DC=army,DC=warrriors" -Filter * _resultSetSize 12000
.. search for large number of objects in domain

adfind -b "CN=group,CN=users,DC=army,DC=warrriors" -asq member -f objectClass=user
Get-ADGroup "Domain Admins" | Get-ADGroupMember | Get-ADUser -Properties sAMAccountname | Select samaccountname    
Get-ADUser -Properties sAMAccountName | Select samaccountname
.. search domain w/ attribute scoped query

dsquery * -s <target ip> -u <username> -p ReallyStrongPassword!! DC=army,DC=warrriors -scope subtree -attr "name" -filter (&(objectclass=group)(objectCategory=group) (groupType:1.2.840.113556.1.4.804:=8))"
.. finds universal groups in the 'army.warriors' domain by using bitwise AND filter (804).

dsquery * -s <target ip> -u <username> -p ReallyStrongPassword!! DC=army,DC=warrriors -attr "name" -filter (&(objectclass=user)(objectCategory=person) useraccountcontrol:1.2.840.113556.1.4.803:=2))"
.. finds disabled user-accounts in the 'army.warriors' domain by using bitwise AND filter (803).




UAC Codes can be added when querying for more than one UAC attribute, ie:

Account Disabled  +  Normal user account
= 2 + 512
= 514 UAC code










adfind -default -bit -f groupType:AND:=8            (finds same as above using 'adfind')
adfind -default -bit -f useraccountcontrol:AND:=2   (finds same as above using 'adfind')

admod -b "CN=Joe Blow,OU=ORG,DC=army,DC=warrriors" description::"Brigade Commander"
Set-ADObject -Identity "CN=Joe Blow,OU=ORG,DC=army,DC=warrriors" -Replace @{Description="Brigade CDR"}
.. modifies an object's atributes

dsmove "CN=Bad Guy,OU=ORG,DC=army,DC=warrriors" -newparent "OU=JAIL,DC=army,DC=warrriors"
admod -b "CN=Bad Guy,OU=ORG,DC=army,DC=warrriors" -move "OU=JAIL,DC=army,DC=warrriors"
Move-ADObject -Identity "CN=Bad Guy,OU=ORG,DC=army,DC=warrriors" -TargetPath "OU=JAIL,DC=army,DC=warrriors"
.. moves object (user, computer) to different OU / container

dsquery * "CN=Jimbo,OU=ORG,DC=army,DC=warrriors" -attr name createTimestamp modifyTimestamp
adfind -default -rb CN=Users -f "cn=Jimbo" createTimestamp modifyTimestamp
.. viewing MAC times of an object (user, computer)

dsquery ou
adfind -default -f "objectcategory=organizationalUnit" -dn
adfind -default -sc oudmp     messy
Get-ADOrganizationalUnit -Filter * | Select DistinguishedName
.. enumerating the OUs in the domain

dsquery * "OU=ORG,CN=users,DC=army,DC=warrriors" -limit 0 -scope onelevel
adfind -b "OU=ORG,CN=users,DC=army,DC=warrriors" -s one -dn
Get-ADObject -SearchBase "CN=users,DC=army,DC=warrriors " -Filter *
.. enumerating the objects (user, computer)in an OU

dsquery * "OU=ORG,CN=users,DC=army,DC=warrriors" -scope base -attr msDS-Approx-Immed-Subordinates
adfind -b "OU=ORG,CN=users,DC=army,DC=warrriors" -s base msDS-Approx-Immed-Subordinates
Get-ADObject -SearchBase "OU=ORG,CN=users,DC=army,DC=warrriors" -Filter * | Measure-Object | FL Count
.. Determining Approximately How Many Child Objects an OU Has

User Account Attributes:
homeDirectory 	Local or UNC path of user’s home directory. 

homeDrive 	Defines the drive letter to map the user’s home directory to. 

lastLogon 	The last time that a user logged on to a particular DC. This information is not replicated among domain controllers in a forest.

lastLogonTimestamp 	Approximate last logon timestamp, which is replicated among domain controllers.  

managedObjects 	Multivalued, linked attribute (with managedBy) that contains a list of DNs of objects the user manages.

lockoutTime 	Large integer representation of the timestamp for when a user was locked out. 

memberOf 			Backlink listing of DNs of the groups the user is a member of. 

objectSid 			Octet string representing the SID of the user.

primaryGroupID 			ID of the primary group for the user. 

profilePath 	UNC path to profile directory. pwdLastSet Large integer denoting the last time the user’s password was set. 

sAMAccountName 	NetBIOS-style name of the user; limited to 20 characters to support legacy applications.

sIDHistory 			Multivalued attribute that contains a list of SIDs that are associated w						ith the user.

scriptPath 			Path and filename of logon script.
 
sn 					Last name of user.

tokenGroups 	List of SIDs for the groups in the domain the user is a member of (both directly and via nesting).

unicodePwd 	Octet string that contains a hash of a user’s password. This attribute cannot be directly queried.

userAccountControl 	Account flags that define such things as account status and password change status.

userPrincipalName 	Internet-style account name for a user, which the user can use to log on to a computer; in most cases this should map to the user’s email address, but this does not always need to be the case.

userWorkstations 		List of computers a user can log on to, stored as a Unicode string.

msDS-PSOApplied 	A backlink that lists the Password Settings Objects that are applied to a user object.

msDS-ResultantPSO 	A constructed attribute that indicates which PSO is in effect for a user object.

msDS-UserPasswordExpiryTimeCompu
ted		A constructed attribute that indicates when a user’s password is going to expire.

msDS-FailedInteractiveLogonCount
Indicates the number of failed interactive logons for a user account since the Interactive Logon Count feature was enabled.

msDS-FailedInteractiveLogonCountAtLastSuccessfulLogon
Indicates the number of failed interactive logons for a user account since the last time the user successfully logged on interactively.

msDSLastFailedInteractiveLogonTime
Indicates the last time and date that the user performed an unsuccessful interactive logon.

msDSLastSuccessfulInteractiveLogonTime
Indicates the last time and date that the user performed a successful interactive logon.

msDS-AuthenticatedAtDC 	A multivalued attribute listing the RODCs through which a user has successfully authenticated to a full DC.

msDS-RevealedDSAs 		Backlink indicating which RODCs have cached a user’s password secrets.

msDS-ManagedPassword 		Contains password information for group-managed service accounts.
.. user account attributes






dsmove "CN=Susan,OU=OLD,DC=army,DC=warrriors"  -newparent "CN=Susan,OU=NEW,DC=army,DC=warrriors"  
admod -b "CN=Susan,OU=OLD,DC=army,DC=warrriors" -move "CN=Susan,OU=NEW,DC=army,DC=warrriors"  
Move-ADObject -Identity "CN=Susan,OU=OLD,DC=army,DC=warrriors" -TargetPath "CN=Susan,OU=NEW,DC=army,DC=warrriors"  
.. moving a user

Get-ADObject " DC=army,DC=warrriors " -Properties * | FL minPwdLength,pwdHistoryLength,pwdProperties,lockoutThreshold
.. Viewing the Domain-Wide Account Lockout and Password Policies

dsmod user "CN=Susan,OU=NEW,DC=army,DC=warrriors" -pwd Passw0rD
admod -b "CN=Susan,OU=NEW,DC=army,DC=warrriors" #setpwd#::Passw0rD
 Set-ADAccountPassword -Identity "CN=Sue,OU=NEW,DC=army,DC=warrriors" -NewPassword Passw0rD  -Reset
.. Seeting a User's password

adfind -b "CN=Sue,OU=NEW,DC=army,DC=warrriors" lastLogonTimestamp -tdc
.. Determining a User’s Last Logon Time

dsquery user -inactive <NumWeeks>
.. Finding Users Who Have Not Logged On Recently

Get-ADPermission -Identity <Group Name>
adfind -gcb -f name=<Group Name> ntsecuritydescriptor -sddl++ -resolvesids
.. Viewing the Permissions of a Group

Get-ADGroupMember -Identity "Domain Admins" -recursive | Select Name
memberof -group "OU=group,DC=army,DC=warrriors"
dsget group "OU=group,DC=army,DC=warrriors" -members -expand
.. Viewing the Nested Members of a Group

dsquery user -stalepwd <NumDaysSinceLastPwdChange>
.. Finding Users Whose Passwords Are About to Expire

Add-ADPermission -Identity <Group Name> -User <User or Group Name> -AccessRights WriteProperty -Properties "members"
Set-ADGroup <Group Name> -ManagedBy "OU=group,DC=army,DC=warrriors"
dsacls "cn=Joe Blow,ou=sales,dc=adatum,dc=com" /G salesadmins@adatum.com:WP;member;
.. Delegating Control for Managing Membership of a Group


Attributes of computer objects ..
cn 					Relative distinguished name of computer objects.

dnsHostName 	Fully qualified DNS name of the computer.

lastLogonTimestamp 	The approximate timestamp of the last time the computer logged in to the domain.

managedBy 	The distinguished name (DN) of the user or group that manages the computer.

memberOf 			List of DNs of the groups the computer is a member of.

msDSAuthenticatedToAccount
List
It is a backlink attribute that identifies users who have successfully authenticated to a full DC via a particular RODC.

msDSIsPrimaryComputerFor	It indirectly identifies the primary user of a computer.

msDS-RevealedUsers 	This attribute was introduced in Windows Server 2008. It identifies the list of users and computers whose secrets have been replicated to an RODC.

operatingSystem 			Text description of the operating system running on the computer. 

operatingSystemHotFix 		Currently not being used, but will hopefully be populated at some point.

operatingSystemServicePack	Service pack version installed on the computer. 

operatingSystemVersion 		Numeric version of the operating system installed on the computer. 

pwdLastSet 	Large integer that can be translated into the last time the computer’s password was set. 

sAMAccountName 	NetBIOS-style name of the computer. This is typically the name of the computer with a $ at the end.

userAccountControl 	Account flag that defines various account properties. In the case of a computer object, this specifies whether the computer is a member computer or a domain controller.

.. Attributes of computer objects

New-ADComputer -Name "<ComputerName>" -SamAccountName "<SamAccountName>" -Path "OU=group,DC=army,DC=warrriors"
admod -b "<ComputerDN>" objectclass::computer sAMAccountName::<ComputerName>$ userAccountControl::4096
description::"<Description>" -add
dsadd computer "<ComputerDN>" -desc "<Description>"
.. Creating a Computer

Move-ADObject -Identity "<ComputerDN>" -TargetPath "<NewParentDN>"
admod -b "<ComputerDN>" -move "<NewParentDN>"
dsmove "<ComputerDN>" -newparent "<NewParentDN>"
.. Moving a Computer Within the Same Domain

Get-ADComputer -Filter {OperatingSystem -eq "Windows Server 2012 Datacenter"} | Select Name
Get-ADComputer -Filter {OperatingSystem -eq "Windows Server 2008 R2 Enterprise" -and OperatingSystemVersion -eq "6.1 (7601)"} | Select Name
adfind -b <DomainDN> -f "(&(objectcategory=computer)(operatingSystem=Windows Server 2012 Datacenter))"
dsquery * <DomainDN> -scope subtree -attr "*" -filter "(&(objectcategory=computer)(operatingSystem=Windows Server 2012 Datacenter))"
.. Finding Computers with a Particular OS

Get-ADComputer -Filter * | Select Name
adfind -default -f objectCategory=computer
.. Listing All the Computer Accounts in a Domain



net user 
.. access shares remotely














